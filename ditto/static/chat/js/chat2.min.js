define(["exports", "module", "react", "vendor/react-bootstrap/index", "chat/js/chat.min"], function (exports, module, _react, _vendorReactBootstrapIndex, _chatJsChatMin) {
			"use strict";

			var _interopRequire = function (obj) { return obj && obj.__esModule ? obj["default"] : obj; };

			var React = _interopRequire(_react);

			// TODO prob only load components we need?
			var Bootstrap = _vendorReactBootstrapIndex;
			// TODO shouldn't this work without /index
			var Chat = _chatJsChatMin;

			var update = React.addons.update;
			var classSet = React.addons.classSet;
			var ReactCSSTransitionGroup = React.addons.CSSTransitionGroup;

			var getMessages = function getMessages(messages, other) {
						return messages.filter(function (msg) {
									return msg.from === other || msg.to === other;
						});
			};

			// util functions
			function isPageHidden() {
						// TODO keep this kind of things to existing polyfills (loaded with modernizr?)?
						return document.hidden || document.webkitHidden || document.mozHidden || document.msHidden;
			};
			// ------

			Chat.connect(chatConf.server, chatConf.me, chatConf.password, chatConf.chatroom, // TODO this will need to be multiple rooms
			chatConf.nick);

			var ChatApp = React.createClass({
						displayName: "ChatApp",

						getInitialState: function getInitialState() {
									return {
												talkingTo: this.props.other,
												chat: Chat.getState()
									};
						},
						componentDidMount: function componentDidMount() {
									Chat.addChangeListener(this._onChange);
						},
						componentWillUnmount: function componentWillUnmount() {
									Chat.removeChangeListener(this._onChange);
						},
						_onChange: function _onChange() {
									this.setState(Chat.getState());
						},
						switchChat: function switchChat(friend) {
									this.setState({
												talkingTo: friend });
						},
						// TODO not sure how to do this now
						//    notifyNewMessage: function (msg) {
						//	console.log('playing beep');
						//	document.getElementById('new-message-beep').play();
						//	var notification = new Notification("New message", {
						//	    icon : "/static/images/ditto-logo.png",
						//	    body: msg.slice(0, 140)
						//	});
						//	// TODO this is supposed to go to the right tab in chrome but doesn't seem to work
						//	notification.onclick = function () {
						//	    window.focus();
						//	};
						//    },
						handleMessageSubmit: function handleMessageSubmit(message) {
									if (this.props.page === "chatroom") {
												Chat.sendGroupMessage(message);
									} else {
												Chat.sendPrivateMessage(this.state.talkingTo, message);
									}
						},
						handleMessageChange: function handleMessageChange() {
									Chat.sendIsTyping();
						},
						render: function render() {
									var messages;
									if (!this.props.page) {
												// For now we have some pages with no chat UI elements but
												// we're still connected to chat so we can, for example, beep
												// on new messages. TODO maybe that should be separated out
												// from the react stuff?
												return React.createElement("div", null);
									} else if (this.state.chat.connectionStatus !== "connected") {
												return React.createElement(
															"div",
															null,
															this.state.chat.connectionStatus
												);
									} else if (this.props.page === "chatroom") {
												return React.createElement(
															"div",
															{ className: "row" },
															React.createElement(
																		"div",
																		{ className: "col-md-8" },
																		React.createElement(Messages, { me: Strophe.getNodeFromJid(this.props.me), talkingTo: this.state.talkingTo, messages: this.state.chat.chatroomMessages, userMeta: this.state.chat.userMeta }),
																		React.createElement(
																					"div",
																					{ className: "row msgbar" },
																					React.createElement(ComposeMessage, { onMessageSubmit: this.handleMessageSubmit, onMessageChange: this.handleMessageChange })
																		)
															),
															React.createElement(
																		"div",
																		{ className: "col-md-4" },
																		React.createElement(ChatroomPresence, { users: this.state.chat.chatroomPresence })
															)
												);
									} else if (this.props.page === "messages") {
												messages = getMessages(this.state.chat.messages, this.state.talkingTo);
												return React.createElement(
															"div",
															{ className: "row" },
															React.createElement(
																		"div",
																		{ className: "col-md-4" },
																		React.createElement(
																					"div",
																					{ className: "list-group" },
																					React.createElement(Friends, { messages: this.state.chat.messages, friends: this.state.chat.friends, friendStatus: this.state.chat.friendStatus, current: this.state.talkingTo, switchChat: this.switchChat, userMeta: this.state.chat.userMeta })
																		)
															),
															React.createElement(
																		"div",
																		{ className: "col-md-8" },
																		React.createElement(Messages, { me: Strophe.getNodeFromJid(this.props.me), talkingTo: this.state.talkingTo, messages: messages, userMeta: this.state.chat.userMeta }),
																		React.createElement(WhosTyping, { users: this.state.whosTyping }),
																		React.createElement(
																					"div",
																					{ className: "row msgbar" },
																					React.createElement(ComposeMessage, { onMessageSubmit: this.handleMessageSubmit, onMessageChange: this.handleMessageChange }),
																					React.createElement(MyStatus, { setStatus: this.setMyStatus })
																		)
															)
												);
									}
						}
			});

			var WhosOnline = React.createClass({
						displayName: "WhosOnline",

						usersPerPanel: 9, // TODO could be props
						getInitialState: function getInitialState() {
									return Chat.whosOnline();
						},
						componentDidMount: function componentDidMount() {
									Chat.addChangeListener(this._onChange);
						},
						componentWillUnmount: function componentWillUnmount() {
									Chat.removeChangeListener(this._onChange);
						},
						_onChange: function _onChange() {
									this.setState(Chat.whosOnline());
						},
						groupUsers: function groupUsers(users) {
									var _this = this;

									var grouped = [];
									var group;
									users.forEach(function (user, i) {
												if (i % _this.usersPerPanel === 0) {
															group = [];
															grouped.push(group);
												}
												group.push(user);
									});
									return grouped;
						},
						render: function render() {
									var groupedUsers = this.groupUsers(this.state.online);
									var items = groupedUsers.map(function (group, i) {
												return React.createElement(
															Bootstrap.CarouselItem,
															{ key: i },
															React.createElement(WhosOnlineItem, { users: group, key: i })
												);
									});
									return React.createElement(
												"div",
												{ className: "row" },
												React.createElement(
															"div",
															{ className: "col-md-4 whosonline" },
															React.createElement(
																		Bootstrap.Carousel,
																		{ interval: false },
																		items
															)
												)
									);
						}
			});

			var WhosOnlineItem = React.createClass({
						displayName: "WhosOnlineItem",

						render: function render() {
									var users = this.props.users.map(function (user, i) {
												return React.createElement(
															"div",
															{ className: "avatar", key: i },
															React.createElement(Avatar, { size: 100, user: user }),
															React.createElement(
																		"p",
																		null,
																		user
															)
												);
									});
									return React.createElement(
												"div",
												null,
												users
									);
						}
			});

			var ChatroomPresence = React.createClass({
						displayName: "ChatroomPresence",

						render: function render() {
									var memberNodes = this.props.users.map(function (user) {
												return React.createElement(
															"li",
															{ className: "list-group-item", key: user },
															React.createElement(
																		"div",
																		{ className: "media" },
																		React.createElement("div", { className: "media-left media-middle" }),
																		React.createElement(
																					"div",
																					{ className: "media-body" },
																					React.createElement(
																								"h4",
																								{ className: "media-heading" },
																								user
																					)
																		)
															)
												);
									});
									return React.createElement(
												"ul",
												{ className: "list-group" },
												memberNodes
									);
						}
			});

			var MyStatus = React.createClass({
						displayName: "MyStatus",

						getInitialState: function getInitialState() {
									return {
												status: "",
												message: "" };
						},
						handleMessageChange: function handleMessageChange(event) {
									this.setState({ message: event.target.value });
						},
						handleStatusChange: function handleStatusChange(e) {
									e.preventDefault();
									var message = this.refs.message.getDOMNode().value.trim();
									var code = this.refs.status.getDOMNode().value;
									this.props.setStatus(code, message);
						},
						render: function render() {
									var options = [];
									for (var code in chatStatus) {
												options.push(React.createElement(
															"option",
															{ value: code, key: code },
															chatStatus[code]
												));
									}
									return React.createElement(
												"form",
												{ onSubmit: this.handleStatusChange },
												React.createElement(
															"div",
															{ className: "col-md-2" },
															React.createElement("input", { className: "form-control", value: this.state.message, onChange: this.handleMessageChange, type: "text", placeholder: "Type your custom status message here...", ref: "message" })
												),
												React.createElement(
															"div",
															{ className: "col-md-2" },
															React.createElement(
																		"select",
																		{ className: "form-control", ref: "status" },
																		React.createElement(
																					"option",
																					{ value: "" },
																					"Online"
																		),
																		options
															)
												),
												React.createElement(
															"div",
															{ className: "col-md-1" },
															React.createElement("input", { className: "form-control btn btn-success", type: "submit", value: "Set status" })
												)
									);
						}
			});

			var Friends = React.createClass({
						displayName: "Friends",

						render: function render() {
									var self = this;
									var friendNodes = this.props.friends.map(function (friend, index) {
												var isCurrent = self.props.current === friend;
												var status = self.props.friendStatus[friend];
												var lastMessage = getMessages(self.props.messages, friend).pop();
												return React.createElement(Friend, { isCurrent: isCurrent, friend: friend, status: status, lastMessage: lastMessage, key: index, switchChat: self.props.switchChat, userMeta: self.props.userMeta });
									});
									return React.createElement(
												"div",
												null,
												friendNodes
									);
						}
			});

			var Friend = React.createClass({
						displayName: "Friend",

						switchChat: function switchChat(e) {
									e.preventDefault();
									this.props.switchChat(this.props.friend);
						},
						render: function render() {
									var current,
									    status = "",
									    lastMessage;
									if (this.props.isCurrent) {
												current = React.createElement(
															"span",
															null,
															" * "
												);
									}
									if (this.props.status && this.props.status.hasOwnProperty("code")) {
												status = React.createElement(FriendStatus, { code: this.props.status.code, message: this.props.status.message });
									} else {
												status = React.createElement(
															"p",
															null,
															"Offline"
												);
									}
									return React.createElement(
												"a",
												{ className: "list-group-item", href: "#", onClick: this.switchChat },
												React.createElement(
															"div",
															{ className: "media-left media-middle friends-avatar" },
															React.createElement(Avatar, { size: 50, user: this.props.friend })
												),
												React.createElement(
															"div",
															{ className: "media-body" },
															React.createElement(
																		"h4",
																		{ className: "media-heading friends-username" },
																		current,
																		" ",
																		this.props.friend
															),
															status,
															React.createElement(LastMessage, { message: this.props.lastMessage })
												)
									);
						}
			});

			var LastMessage = React.createClass({
						displayName: "LastMessage",

						render: function render() {
									if (this.props.message) {
												return React.createElement(
															"div",
															null,
															this.props.message.message,
															" ",
															React.createElement(
																		"small",
																		null,
																		React.createElement(Timestamp, { when: this.props.message.when })
															)
												);
									} else {
												return React.createElement("div", null); // TODO empty component a thing?
									}
						}
			});

			var FriendStatus = React.createClass({
						displayName: "FriendStatus",

						render: function render() {
									var status = chatStatus[this.props.code] || "Online";
									return React.createElement(
												"p",
												null,
												status,
												" ",
												React.createElement(
															"em",
															null,
															this.props.message
												)
									);
						}
			});

			var Chatroom = React.createClass({
						displayName: "Chatroom",

						render: function render() {
									var current;
									if (this.props.isInside) {
												current = React.createElement(
															"span",
															null,
															" * "
												);
									}
									return React.createElement(
												"a",
												{ className: "list-group-item", onClick: this.props.show, href: "#" },
												current,
												" Chatroom"
									);
						}
			});

			var Messages = React.createClass({
						displayName: "Messages",

						getInitialState: function getInitialState() {
									return { height: "" };
						},
						componentDidMount: function componentDidMount() {
									// TODO window.onresize cross-browser?
									window.onresize = this.updateHeight;
						},
						updateHeight: function updateHeight() {
									// TODO no pure css way to do this?
									// Note, tried to calculate the height from other dom elements but it's easier just to hardcode this vaule and change it when the css changes
									var height = $(window).height() - 160;
									this.setState({ height: height });
						},
						componentWillMount: function componentWillMount() {
									this.updateHeight();
						},
						componentWillUnmount: function componentWillUnmount() {},
						componentDidUpdate: function componentDidUpdate() {
									var node = this.getDOMNode();
									node.scrollTop = node.scrollHeight;
						},
						render: function render() {
									var userMeta = this.props.userMeta;
									var self = this;
									var messageNodes = this.props.messages.map(function (m, i) {
												// TODO this key should be unique across all messages, how do I do that?
												return React.createElement(Message, { me: self.props.me, from: m.from, to: m.to, message: m.message, when: m.when, userMeta: userMeta, key: m.when });
									});
									var style = { height: this.state.height };
									return React.createElement(
												"div",
												{ style: style, id: "msgs", ref: "messages" },
												React.createElement(
															ReactCSSTransitionGroup,
															{ transitionName: "example" },
															messageNodes
												)
									);
						}
			});

			var Message = React.createClass({
						displayName: "Message",

						render: function render() {
									var left_avatar, right_avatar;
									var is_from_me = this.props.from === this.props.me;
									var mediaClass = classSet({
												"media-left": !is_from_me,
												"media-right": is_from_me
									});
									var avatar = React.createElement(
												"div",
												{ className: mediaClass },
												React.createElement(Avatar, { size: 50, user: this.props.from })
									);
									var colClass = classSet({
												"col-md-6": true,
												"col-md-offset-6": is_from_me
									});
									if (is_from_me) {
												right_avatar = avatar;
									} else {
												left_avatar = avatar;
									}
									return React.createElement(
												"div",
												{ className: "row" },
												React.createElement(
															"div",
															{ className: colClass },
															React.createElement(
																		"div",
																		{ className: "media" },
																		left_avatar,
																		React.createElement(
																					"div",
																					{ className: "media-body" },
																					React.createElement(
																								"h4",
																								{ className: "media-heading" },
																								this.props.from,
																								" ",
																								React.createElement(
																											"small",
																											null,
																											React.createElement(Timestamp, { when: this.props.when })
																								)
																					),
																					this.props.message
																		),
																		right_avatar
															)
												)
									);
						}
			});

			var WhosTyping = React.createClass({
						displayName: "WhosTyping",

						render: function render() {
									var nodes = this.props.users.map(function (user, i) {
												return React.createElement(
															"p",
															{ key: i },
															user,
															" is typing ..."
												);
									});
									return React.createElement(
												"div",
												null,
												nodes
									);
						}
			});

			var Avatar = React.createClass({
						displayName: "Avatar",

						getInitialState: function getInitialState() {
									return Chat.getUserProfiles();
						},
						componentDidMount: function componentDidMount() {
									Chat.addChangeListener(this._onChange);
						},
						componentWillUnmount: function componentWillUnmount() {
									Chat.removeChangeListener(this._onChange);
						},
						_onChange: function _onChange() {
									this.setState(Chat.getUserProfiles());
						},
						render: function render() {
									// TODO where to put global constant state like this?
									var avatarSVGs = $("#avatar_svgs").text();
									var avatarName;
									var profile = this.state.profiles[this.props.user];
									if (profile) {
												avatarName = profile.avatar;
									} else {
												avatarName = "cupcake";
									}
									// TODO better way to generate svg without jquery/outerHTML, convert svg to react component?
									var avatarSVG = $(avatarSVGs);
									if (avatarName) {
												avatarSVG.find(">g[id!=" + avatarName + "]").remove();
												avatarSVG.find(">g").show();
												avatarSVG.attr({
															width: this.props.size,
															height: this.props.size
												});
												avatarSVG = avatarSVG.get(0).outerHTML;
									} else {
												avatarSVG = "";
									}
									return React.createElement(
												"div",
												{ className: "avatar" },
												React.createElement("div", { dangerouslySetInnerHTML: { __html: avatarSVG } })
									);
						}
			});

			var Timestamp = React.createClass({
						displayName: "Timestamp",

						componentDidMount: function componentDidMount() {
									this.interval = setInterval(this.updateDelta, 60 * 1000);
						},
						componentWillUnmount: function componentWillUnmount() {
									clearInterval(this.interval);
						},
						updateDelta: function updateDelta() {
									// TODO this doesn't feel right
									this.setState({});
						},
						// TODO prob library for this
						timeAgo: function timeAgo(date) {
									var delta = new Date() - date;
									if (delta < 60000) {
												return "less than a minute ago";
									}
									if (delta < 3600 * 1000) {
												var minutes = delta / (60 * 1000);
												return Math.floor(minutes) + " minutes ago";
									}
									if (delta < 2 * 3600 * 1000) {
												return "about an hour ago";
									}
									return "ages ago";
						},
						render: function render() {
									var when = this.props.when;
									var delta = this.timeAgo(when);
									return React.createElement(
												"time",
												{ dateTime: when.toISOString() },
												delta
									);
						}
			});

			var ComposeMessage = React.createClass({
						displayName: "ComposeMessage",

						getInitialState: function getInitialState() {
									return { value: "" };
						},
						handleChange: function handleChange(event) {
									this.setState({ value: event.target.value });
									this.props.onMessageChange();
						},
						handleSubmit: function handleSubmit(e) {
									e.preventDefault();
									var message = this.refs.message.getDOMNode().value.trim();
									if (!message) {
												return;
									}
									this.props.onMessageSubmit(message);
									this.setState({ value: "" });
									return;
						},
						render: function render() {
									return React.createElement(
												"form",
												{ onSubmit: this.handleSubmit },
												React.createElement(
															"div",
															{ className: "col-md-6" },
															React.createElement("input", { className: "form-control", value: this.state.value, onChange: this.handleChange, type: "text", placeholder: "Type your message here...", ref: "message" })
												),
												React.createElement(
															"div",
															{ className: "col-md-1" },
															React.createElement("input", { className: "btn btn-success", type: "submit", value: "Say it!" })
												)
									);
						}
			});

			var render = function render() {
						var whosonline = document.getElementById("whosonline");
						var chat = document.getElementById("chat");
						if (whosonline) {
									React.render(React.createElement(WhosOnline, null), whosonline);
						};
						if (chat) {
									React.render(React.createElement(ChatApp, { me: chatConf.me, other: chatConf.other, page: chatConf.page }), chat);
						}
						React.render(React.createElement(Avatar, { user: "mark", size: 50 }), document.getElementById("nav-avatar"));
			};
			module.exports = render;
});

// TODO window.remove event listener
//# sourceMappingURL=chat2.min.js.map