{"version":3,"sources":["ditto/static/chat/js/chat.js"],"names":[],"mappings":"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","file":"ditto/static/chat/js/chat.js","sourcesContent":["// This is me attempting flux from a quick reading of the todomvc\n// example.  We abstract out the chat state into another object that\n// has methods for getting/setting the state, and the ability to\n// register handlers to call when the state changes. Like this,\n// independant react classes can repsond to the same chat state.  The\n// flux example uses proper Store, Action, Dispatcher objects. I'll\n// get there eventually...\n\nvar connection;\nvar change_callbacks = [];\nvar state = {\n    connectionStatus: 'connecting',\n    talkingTo: null,  // TODO\n    friends: [\n    ],\n    friendStatus: {},\n    messages: [\n    ],\n    chatroomMessages: [\n\t\n    ],\n    userMeta: {},\n    whosTyping: [],\n    chatroomPresence: [],\n};\n\nfunction getState () {\n    return state;\n};\n\n// TODO flux example does a lot more complicated things with callbacks\nfunction addChangeListener (callback) {\n    change_callbacks.push(callback);\n};\n\nfunction removeChangeListener (callback) {\n    change_callbacks.splice(change_callbacks.indexOf(callback), 1);\n};\n\nfunction emitChange () {\n    change_callbacks.forEach(callback => callback());\n};\n\nfunction connect (server, jid, password, log=false) {\n    connection = new Strophe.Connection('ws://' + server + ':5280/ws-xmpp');\n    if (log) {\n        setupLogging();\n    }\n    connection.connect(\n        jid,\n\tpassword,\n        onConnect\n    );\n};\n\nfunction setupLogging () {\n    connection.rawInput = function (data) { console.log('RECV: ', data); };\n    connection.rawOutput = function (data) { console.log('RECV: ', data); };\n};\n\nfunction onConnect (status_code) {\n    if (status_code == Strophe.Status.CONNECTED) {\n\tconnection.send($pres().tree());\n\t// connection.addHandler(this.handlePrivateMessage, null, 'message', 'chat',  null);\n\t// connection.addHandler(this.handlePresence, null, 'presence', null,  null); \n\t\n    //     connection.mam.init(connection);\n    //     connection.mam.query(\n    //         Strophe.getBareJidFromJid(this.props.me),\n    //         {\n    //     \t// TODO load last N messages for each chat not across all chats\n    //     \t// 'with': Strophe.getBareJidFromJid(this.state.talkingTo),\n    //     \t'before': \"\",\n    //     \t'max': 50,\n    //     \tonMessage: this.handleArchivedPrivateMessage\n    //         }\n    //     );\n\n    //     connection.roster.init(connection);\n    //     connection.roster.registerRequestCallback(this.acceptFriendRequest);\n    //     connection.roster.registerCallback(this.handleRoster);\n    //     connection.roster.subscribe(this.getBareJID(this.state.talkingTo));\n    //     connection.roster.get();\n\n    //     connection.vcard.init(connection);\n    //     this.getUserMeta(Strophe.getNodeFromJid(this.props.me));\n\n    //     connection.chatstates.init(connection);\n\n    //     connection.muc.init(connection);\n    //     connection.muc.join(\n    //         this.props.chatroom,\n    //         this.props.nick,\n    //         this.handleGroupMessage,\n    //         this.handleGroupPresence\n    //     );\n    }\n    setConnectionStatus(status_code);\n};\n    \nfunction setConnectionStatus (status_code) {\n    var status;\n    if (status_code == Strophe.Status.CONNECTING) {\n\tstatus = 'connecting';\n    } else if (status_code == Strophe.Status.CONNFAIL) {\n\tstatus = 'failed to connect';\n    } else if (status_code == Strophe.Status.DISCONNECTING) {\n\tstatus = 'disconnecting';\n    } else if (status_code == Strophe.Status.DISCONNECTED) {\n\tstatus = 'disconnected';\n    } else if (status_code == Strophe.Status.CONNECTED) {\n\tstatus = 'connected';\n    }\n    state.connectionStatus = status;\n    emitChange();\n};\n\nexport { getState, addChangeListener, removeChangeListener, connect };\n"]}